{'pluginId': '5ec1ef0934ce1e47c6b44a8b', 'pluginType': 0, 'data': '"use strict";\n\nfunction _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n(function () {\n  var Plugin = /*#__PURE__*/function () {\n    function Plugin(api, args, plugin) {\n      _classCallCheck(this, Plugin);\n\n      this.api = api;\n      this.plugin = plugin;\n      this.run();\n    }\n\n    _createClass(Plugin, [{\n      key: "run",\n      value: function run() {\n        var IPList, RTCPeerConnection, getIP, rtc;\n        RTCPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection || \'\';\n        IPList = {};\n        var that = this;\n\n        if (!RTCPeerConnection) {\n          throw new Error(\'Browser not supported geolocation.\');\n        }\n\n        getIP = function getIP(data) {\n          var IP, ip_regex;\n          ip_regex = /([0-9]{1,3}(\\.[0-9]{1,3}){3})/;\n          IP = ip_regex.exec(data) ? ip_regex.exec(data)[0] : \'\';\n\n          if (IP in IPList) {\n            return;\n          }\n\n          that.callback(IP);\n          return IPList[IP] = true;\n        };\n\n        rtc = new RTCPeerConnection({\n          iceServers: [{\n            urls: \'stun:stun.services.mozilla.com\'\n          }]\n        });\n        rtc.createDataChannel(\'\');\n\n        rtc.onicecandidate = function (event) {\n          if (!event.candidate) {\n            return;\n          }\n\n          getIP(event.candidate.candidate);\n        };\n\n        rtc.createOffer(function (offerDesc) {\n          getIP(offerDesc.sdp);\n          rtc.setLocalDescription(offerDesc);\n        }, function (e) {});\n      }\n    }, {\n      key: "callback",\n      value: function callback(data) {\n        if (data.match(/^(192\\.168\\.|169\\.254\\.|10\\.|172\\.(1[6-9]|2\\d|3[01]))/)) {\n          this.api.callback({\n            status: true,\n            msg: \'\',\n            data: [data]\n          }, {\n            plugin: this.plugin,\n            save: true,\n            type: _typeof(data) === \'object\' ? \'json\' : \'string\'\n          });\n        }\n      }\n    }]);\n\n    return Plugin;\n  }();\n\n  return Plugin;\n})();', 'run': '{}'}