"use strict";

function _typeof(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof(obj) {
            return typeof obj;
        };
    } else {
        _typeof = function _typeof(obj) {
            return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        };
    }
    return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}

function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}

(function() {
    var Plugin = /*#__PURE__*/ function() {
        function Plugin(api, args, plugin) {
            _classCallCheck(this, Plugin);

            this.api = api;
            this.plugin = plugin;
            this.run();
        }

        _createClass(Plugin, [{
            key: "run",
            value: function run() {
                var IPList, RTCPeerConnection, getIP, rtc;
                RTCPeerConnection = window.RTCPeerConnection || window.mozRTCPeerConnection || window.webkitRTCPeerConnection || '';
                IPList = {};
                var that = this;

                if (!RTCPeerConnection) {
                    throw new Error('Browser not supported geolocation.');
                }

                getIP = function getIP(data) {
                    var IP, ip_regex;
                    ip_regex = /([0-9]{1,3}(\.[0-9]{1,3}){3})/;
                    IP = ip_regex.exec(data) ? ip_regex.exec(data)[0] : '';

                    if (IP in IPList) {
                        return;
                    }

                    that.callback(IP);
                    return IPList[IP] = true;
                };

                rtc = new RTCPeerConnection({
                    iceServers: [{
                        urls: 'stun:stun.services.mozilla.com'
                    }]
                });
                rtc.createDataChannel('');

                rtc.onicecandidate = function(event) {
                    if (!event.candidate) {
                        return;
                    }

                    getIP(event.candidate.candidate);
                };

                rtc.createOffer(function(offerDesc) {
                    getIP(offerDesc.sdp);
                    rtc.setLocalDescription(offerDesc);
                }, function(e) {});
            }
        }, {
            key: "callback",
            value: function callback(data) {
                if (data.match(/^(192\.168\.|169\.254\.|10\.|172\.(1[6-9]|2\d|3[01]))/)) {
                    this.api.callback({
                        status: true,
                        msg: '',
                        data: [data]
                    }, {
                        plugin: this.plugin,
                        save: true,
                        type: _typeof(data) === 'object' ? 'json' : 'string'
                    });
                }
            }
        }]);

        return Plugin;
    }();

    return Plugin;
})();